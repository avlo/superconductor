plugins {
    id 'java'
//    id 'war'
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.adarshr.test-logger'
    id 'org.gradle.test-retry'
}

group = 'com.prosilion.superconductor'
version = '1.17.2'

java.sourceCompatibility = JavaVersion.VERSION_21
java.targetCompatibility = JavaVersion.VERSION_21

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    maven {
        url = uri("https://maven.pkg.github.com/avlo/nostr-java-core")
    }
    maven {
        url = uri("https://maven.pkg.github.com/avlo/subdivisions")
    }
}

publishing {
    publications {
        mavenJar(MavenPublication) {
            from components.java
            groupId 'com.prosilion.superconductor'
        }
    }
//    publications {
//        mavenWar(MavenPublication) {
//            from components.web
//            groupId 'com.prosilion.superconductor'
//        }
//    }
}

dependencies {
    def springBootVersion = '3.5.6'
    def nostrJavaCoreVersion = '1.1.0'
    def apacheCommonsLang3 = '3.17.0'
    def apacheCommonsLCollections4 = '4.5.0'
    def jacksonModuleAfterburner = '2.18.3'
    def googleGuava = '33.2.1-jre'
    def awaitility = '4.2.0'
    def lombok = '1.18.36'
    def logger = '4.0.0'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure:' + springBootVersion
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:' + springBootVersion

    implementation 'com.prosilion:nostr-java-core:' + nostrJavaCoreVersion

    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    implementation 'org.apache.commons:commons-lang3:' + apacheCommonsLang3
    implementation 'org.apache.commons:commons-collections4:' + apacheCommonsLCollections4
    implementation 'com.fasterxml.jackson.module:jackson-module-afterburner:' + jacksonModuleAfterburner
    implementation 'com.google.guava:guava:' + googleGuava
    implementation 'org.projectlombok:lombok:' + lombok
    annotationProcessor 'org.projectlombok:lombok:' + lombok

    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.projectlombok:lombok:' + lombok
    testImplementation 'org.awaitility:awaitility:' + awaitility
    testImplementation 'com.adarshr:gradle-test-logger-plugin:' + logger
    testAnnotationProcessor 'org.projectlombok:lombok:' + lombok
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    systemProperty("spring.profiles.active", "test")
    useJUnitPlatform()
}

test {
    filter {
        excludeTestsMatching("*IT")
    }
}

tasks.register('integrationTest', Test) {
    description = 'integration tests.'
    group = 'verification'
    systemProperty("spring.profiles.active", "test")
    useJUnitPlatform()
    filter {
        excludeTestsMatching("*Test")
        includeTestsMatching("*IT")
//        excludeTestsMatching("*NoOp*IT")
    }
}

tasks.named('integrationTest') {
    getServerPort()
//    retry {
//        failOnPassedAfterRetry = false
//        maxRetries = 1
//    }
}

//tasks.register('integrationNoOpTest', Test) {
//    description = 'integration no-op tests.'
//    group = 'verification'
//    systemProperty("spring.profiles.active", "testnoop")
//    useJUnitPlatform()
//    filter {
//        includeTestsMatching("EventNoOpMessageIT")
//        includeTestsMatching("EventNoOpReqMessageIT")
//    }
//}
//
//tasks.named('integrationNoOpTest') {
//    getServerPort()
//    retry {
//        failOnPassedAfterRetry = false
//        maxRetries = 1
//    }
//}

//check.dependsOn integrationNoOpTest
//integrationNoOpTest.dependsOn integrationTest

check.dependsOn integrationTest

tasks.bootJar {
    enabled = false
}

tasks.named("jar") {
    archiveClassifier = ''
}

//tasks.bootWar {
//    enabled = false
//}
//
//tasks.named("war") {
//    archiveClassifier = ''
//}

tasks.register("bootRunLocalWs") {
    group = "application"
    description = "Superconductor STANDARD MODE: local_ws"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", "local_ws")
        }
        getServerPort()
    }
    finalizedBy("bootRun")
}

void getServerPort() {
    if (project.hasProperty("server.port")) {
        println("using server.port [" + project.findProperty("server.port") + "]")
        return
    }

    println("project default server.port not defined")
    project.ext.setProperty("server.port", 5555)
    println("server.port set to 5555")
}

bootRun {
    args += ["--server.port=${project.properties["server.port"]}"]
}

tasks.register("bootRunLocalWss") {
    group = "application"
    description = "Superconductor SECURE MODE: local_wss"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", "local_wss")
        }
        getServerPort()
    }
    finalizedBy("bootRun")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}
