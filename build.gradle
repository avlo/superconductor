import java.time.Duration

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.freefair.lombok' version '8.12.2.1'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'org.gradle.test-retry' version '1.6.2'
}

group = 'com.prosilion'
version = '1.11.0'
description = 'superconductor'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal {
        url = 'https://plugins.gradle.org/m2/'
    }
}


dependencies {
    def springBootVersion = '3.4.3'
    def nostrJavaVersion = '0.6.5-SNAPSHOT'
    def apacheCommonsLang3 = '3.17.0'
    def jacksonModuleAfterburner = '2.18.3'
    def googleGuava = '33.2.1-jre'
    def awaitility = '4.2.0'
    def subdivisionsVersion = '0.0.1'

    developmentOnly 'org.springframework.boot:spring-boot-devtools:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'xyz.tcheeric:nostr-java-api:' + nostrJavaVersion

    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'com.prosilion:subdivisions:' + subdivisionsVersion

    implementation 'org.apache.commons:commons-lang3:' + apacheCommonsLang3
    implementation 'com.fasterxml.jackson.module:jackson-module-afterburner:' + jacksonModuleAfterburner
    implementation 'com.google.guava:guava:' + googleGuava
    implementation 'com.h2database:h2'
    implementation 'com.mysql:mysql-connector-j'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    testImplementation 'org.awaitility:awaitility:' + awaitility
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    systemProperty("spring.profiles.active", "test")
    useJUnitPlatform()
}

test {
    filter {
        excludeTestsMatching("*IT");
    }
}

tasks.register('integrationTest', Test) {
    description = 'integration tests.'
    group = 'verification'
    systemProperty("spring.profiles.active", "test")
    useJUnitPlatform()
    filter {
        excludeTestsMatching("*Test");
        includeTestsMatching("*IT");
    }
}

integrationTest {
    retry {
        failOnPassedAfterRetry = false
        maxRetries = 1
    }
    setTimeout(Duration.ofSeconds(60))
}

check.dependsOn integrationTest

tasks.register("bootRunLocalWs") {
    group = "application"
    description = "Superconductor STANDARD MODE: local_ws"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", "local_ws")
        }
    }
    finalizedBy("bootRun")
}

if (!project.hasProperty("server.port")) {
    println("DOES NOT HAVE PROPERTY")
//    project.ext.set("server.port", 5555)
    println("000000000000000000000000 server.port allegedly should be blank: " + project.findProperty("server.port"))
    println("000000000000000000000000 project.ext allegedly should be blank: " + project.ext.find("server.port"))
//    project.setProperty("server.port", 5555)
//    project.ext.set("server.port", 5555)
    project.ext.setProperty("server.port", 5555)
    println("PROPERTIES NOW SET")
    println("111111111111111111111111 server.port: " + project.findProperty("server.port"))
    println("111111111111111111111111 either project.ext.find should be populated: " + project.ext.find("server.port"))
    println("111111111111111111111111 or project.ext.getProperty should be populated: " + project.ext.getProperty("server.port"))
} else {
    println("HAS PROPERTY")
    println("222222222222222222222222 server.port: " + project.findProperty("server.port"))
    println("222222222222222222222222 either project.ext.find should be populated: " + project.ext.find("server.port"))
    println("222222222222222222222222 or project.ext.getProperty should be populated: " + project.ext.getProperty("server.port"))
}

bootRun {
    args += ["--server.port=${project.properties["server.port"]}"]
}

tasks.register("bootRunLocalWss") {
    group = "application"
    description = "Superconductor SECURE MODE: local_wss"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", "local_wss")
        }
    }
    finalizedBy("bootRun")
}
